import os
import subprocess
from pathlib import Path
import sys
import pickle
def create_django_project(project_name="myproject", app_name="myapp"):
    """
    Create a Django project with a specified structure including an app, static files, templates,
    migrations, onehotencoder.pkl, sustain.py, and EColi-model.pkl for an E. coli prediction app.

    Args:
        project_name (str): Name of the Django project (default: 'myproject')
        app_name (str): Name of the Django app (default: 'myapp')
    """
    # Define base path
    base_dir = Path.cwd() / project_name

    # Check if Django is installed
    try:
        import django
    except ImportError:
        print("Error: Django is not installed. Run `pip install django` in your virtual environment.")
        sys.exit(1)

    # Check Python executable
    print(f"Using Python: {sys.executable}")

    # Create Django project
    if base_dir.exists():
        print(f"Error: Directory '{project_name}' already exists.")
        sys.exit(1)

    try:
        subprocess.run(["django-admin", "startproject", project_name], check=True, capture_output=True, text=True)
        print(f"Created Django project: {project_name}")
    except subprocess.CalledProcessError as e:
        print(f"Error creating project: {e.stderr}")
        sys.exit(1)

    # Change to project directory
    os.chdir(base_dir)

    # Create Django app
    python_executable = sys.executable
    try:
        subprocess.run([python_executable, "manage.py", "startapp", app_name], check=True, capture_output=True, text=True)
        print(f"Created Django app: {app_name}")
    except subprocess.CalledProcessError as e:
        print(f"Error creating app: {e.stderr}")
        sys.exit(1)

    # Create additional directories
    directories = [
        f"{app_name}/static/css",
        f"{app_name}/static/js",
        f"{app_name}/static/images",
        f"{app_name}/templates",
        f"{app_name}/migrations"
    ]
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"Created directory: {directory}")

    # Create __init__.py in migrations
    Path(f"{app_name}/migrations/__init__.py").touch()
    print(f"Created file: {app_name}/migrations/__init__.py")

    # Create placeholder 0001_initial.py in migrations
    migrations_content = """# Generated by Django
from django.db import migrations

class Migration(migrations.Migration):
    initial = True
    dependencies = []
    operations = []
"""
    with open(f"{app_name}/migrations/0001_initial.py", "w") as f:
        f.write(migrations_content)
    print(f"Created file: {app_name}/migrations/0001_initial.py")

    # Create index.html
    index_html_content = """{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>E.Coli Prediction through Genome</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <div class="wrap">
        <form method="post" action="" enctype="multipart/form-data">
            {% csrf_token %}
            <div class="search">
                <input name="Name" type="text" class="searchTerm" placeholder="Type the genome here">
                <p>For example: ttaacattaataaataaggaggctctaatggcactcattagccaatcaatcaagaac</p>
                <p>For example: ttactagcaatacgcttgcgttcggtggttaagtatgtataatgcgcgggcttgtcg</p>
            </div>
            <br>
            <button type="submit" name="pred_button" class="searchButton">Submit
                <i class="fa fa-search"></i>
            </button>
        </form>
        {% if response is not None %}
            <h2>The person has E.Coli: {{ response }}</h2>
        {% else %}
            <h2>No result available. Please submit a valid genome sequence.</h2>
        {% endif %}
        <h3>Recent Submissions</h3>
        <ul>
            {% for post in posts %}
                <li>Genome: {{ post.genome|slice:":50" }}... | Prediction: {{ post.prediction }} | Submitted: {{ post.submitted_at }}</li>
            {% empty %}
                <li>No submissions yet.</li>
            {% endfor %}
        </ul>
    </div>
</body>
</html>
"""
    with open(f"{app_name}/templates/index.html", "w") as f:
        f.write(index_html_content)
    print(f"Created file: {app_name}/templates/index.html")

    # Create style.css
    style_css_content = """body {
    background-color: #ee2d14;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 2000 1500'%3E%3Cdefs%3E%3CradialGradient id='a' gradientUnits='objectBoundingBox'%3E%3Cstop offset='0' stop-color='%23ffba2c'/%3E%3Cstop offset='1' stop-color='%23ee2d14'/%3E%3C/radialGradient%3E%3ClinearGradient id='b' gradientUnits='userSpaceOnUse' x1='0' y1='750' x2='1550' y2='750'%3E%3Cstop offset='0' stop-color='%23f77420'/%3E%3Cstop offset='1' stop-color='%23ee2d14'/%3E%3C/linearGradient%3E%3Cpath id='s' fill='url(%23b)' d='M1549.2 51.6c-5.4 99.1-20.2 197.6-44.2 293.6c-24.1 96-57.4 189.4-99.3 278.6c-41.9 89.2-92.4 174.1-150.3 253.3c-58 79.2-123.4 152.6-195.1 219c-71.7 66.4-149.6 125.8-232.2 177.2c-82.7 51.4-170.1 94.7-260.7 129.1c-90.6 34.4-184.4 60-279.5 76.3C192.6 1495 96.1 1502 0 1500c96.1-2.1 191.8-13.3 285.4-33.6c93.6-20.2 185-49.5 272.5-87.2c87.6-37.7 171.3-83.8 249.6-137.3c78.4-53.5 151.5-114.5 217.9-181.7c66.5-67.2 126.4-140.7 178.6-218.9c52.3-78.3 96.9-161.4 133-247.9c36.1-86.5 63.8-176.2 82.6-267.6c18.8-91.4 28.6-184.4 29.6-277.4c0.3-27.6 23.2-48.7 50.8-48.4s49.5 21.8 49.2 49.5c0 0.7 0 1.3-0.1 2L1549.2 51.6z'/%3E%3Cg id='g'%3E%3Cuse href='%23s' transform='scale(0.12) rotate(60)'/%3E%3Cuse href='%23s' transform='scale(0.2) rotate(10)'/%3E%3Cuse href='%23s' transform='scale(0.25) rotate(40)'/%3E%3Cuse href='%23s' transform='scale(0.3) rotate(-20)'/%3E%3Cuse href='%23s' transform='scale(0.4) rotate(-30)'/%3E%3Cuse href='%23s' transform='scale(0.5) rotate(20)'/%3E%3Cuse href='%23s' transform='scale(0.6) rotate(60)'/%3E%3Cuse href='%23s' transform='scale(0.7) rotate(10)'/%3E%3Cuse href='%23s' transform='scale(0.835) rotate(-40)'/%3E%3Cuse href='%23s' transform='scale(0.9) rotate(40)'/%3E%3Cuse href='%23s' transform='scale(1.05) rotate(25)'/%3E%3Cuse href='%23s' transform='scale(1.2) rotate(8)'/%3E%3Cuse href='%23s' transform='scale(1.333) rotate(-60)'/%3E%3Cuse href='%23s' transform='scale(1.45) rotate(-30)'/%3E%3Cuse href='%23s' transform='scale(1.6) rotate(10)'/%3E%3C/g%3E%3C/defs%3E%3Cg transform='translate(200 0)'%3E%3Cg transform='translate(0 120)'%3E%3Ccircle fill='url(%23a)' r='3000'/%3E%3Cg opacity='0.5'%3E%3Ccircle fill='url(%23a)' r='2000'/%3E%3Ccircle fill='url(%23a)' r='1800'/%3E%3Ccircle fill='url(%23a)' r='1700'/%3E%3Ccircle fill='url(%23a)' r='1651'/%3E%3Ccircle fill='url(%23a)' r='1450'/%3E%3Ccircle fill='url(%23a)' r='1250'/%3E%3Ccircle fill='url(%23a)' r='1175'/%3E%3Ccircle fill='url(%23a)' r='900'/%3E%3Ccircle fill='url(%23a)' r='750'/%3E%3Ccircle fill='url(%23a)' r='500'/%3E%3Ccircle fill='url(%23a)' r='380'/%3E%3Ccircle fill='url(%23a)' r='250'/%3E%3C/g%3E%3Cg transform='rotate(-118.8 0 0)'%3E%3Cuse href='%23g' transform='rotate(10)'/%3E%3Cuse href='%23g' transform='rotate(120)'/%3E%3Cuse href='%23g' transform='rotate(240)'/%3E%3C/g%3E%3Ccircle fill-opacity='0' fill='url(%23a)' r='3000'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    background-attachment: fixed;
    background-size: cover;
}
div.search {
    width: 100%;
}
input.searchTerm {
    width: 100%;
    border: 3px solid #00B4CC;
    border-right: none;
    padding: 5px;
    height: 36px;
    border-radius: 5px 0 0 5px;
    outline: none;
    color: #9DBFAF;
    font-size: 20px;
}
select.searchTerm {
    width: 100%;
    border: 3px solid #00B4CC;
    border-right: none;
    padding: 5px;
    height: 36px;
    border-radius: 5px 0 0 5px;
    outline: none;
    color: #9DBFAF;
    font-size: 20px;
}
input.searchTerm:focus {
    color: #00B4CC;
}
button.searchButton {
    width: 80px;
    height: 36px;
    border: 1px solid #00B4CC;
    background: #00B4CC;
    text-align: center;
    color: #fff;
    border-radius: 0 5px 5px 0;
    cursor: pointer;
    font-size: 20px;
}
div.wrap {
    height: 95vh;
    width: 95vw;
}
body.bg-image {
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
    min-height: 300px;
    max-height: 700px;
}
.bg-image[style^="background-image:"][style$=".svg)"] {
    background-size: 400px 300px;
    background-image: url(https://upload.wikimedia.org/wikipedia/en/8/80/Wikipedia-logo-v2.svg);
}
"""
    with open(f"{app_name}/static/css/style.css", "w") as f:
        f.write(style_css_content)
    print(f"Created file: {app_name}/static/css/style.css")

    # Create placeholder js file
    Path(f"{app_name}/static/js/script.js").touch()
    print(f"Created file: {app_name}/static/js/script.js")

    # Create onehotencoder.pkl (placeholder)
    try:
        import pandas
        import sklearn
        from sklearn.preprocessing import OneHotEncoder
        genome_data = [
            "ttaacattaataaataaggaggctctaatggcactcattagccaatcaatcaagaac",
            "ttactagcaatacgcttgcgttcggtggttaagtatgtataatgcgcgggcttgtcg"
        ]
        X = [[char for char in genome] for genome in genome_data]
        encoder = OneHotEncoder(sparse_output=True, handle_unknown='ignore')
        encoder.fit(X)
        with open(f"{app_name}/onehotencoder.pkl", "wb") as f:
            pickle.dump(encoder, f)
        print(f"Created file: {app_name}/onehotencoder.pkl")
    except ImportError:
        print("Warning: pandas or scikit-learn not installed. Skipping onehotencoder.pkl creation. Install with `pip install pandas scikit-learn`.")
        Path(f"{app_name}/onehotencoder.pkl").touch()  # Create empty file as placeholder

    # Create EColi-model.pkl (placeholder)
    try:
        from sklearn.ensemble import RandomForestClassifier
        y = [1, 0]
        X_encoded = encoder.transform(X).toarray()
        model = RandomForestClassifier()
        model.fit(X_encoded, y)
        with open(f"{app_name}/EColi-model.pkl", "wb") as f:
            pickle.dump(model, f)
        print(f"Created file: {app_name}/EColi-model.pkl")
    except (ImportError, NameError):
        print("Warning: scikit-learn not installed or encoder not created. Skipping EColi-model.pkl creation.")
        Path(f"{app_name}/EColi-model.pkl").touch()  # Create empty file as placeholder

    # Create sustain.py
    sustain_content = """import pickle
import os
from django.conf import settings

model_path = os.path.join(settings.BASE_DIR, 'myapp', 'EColi-model.pkl')
with open(model_path, 'rb') as f:
    model = pickle.load(f)
"""
    with open(f"{app_name}/sustain.py", "w") as f:
        f.write(sustain_content)
    print(f"Created file: {app_name}/sustain.py")

    # Update models.py for GenomeSubmission
    models_content = """from django.db import models

class GenomeSubmission(models.Model):
    genome = models.TextField()
    prediction = models.BooleanField(null=True)
    submitted_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Genome: {self.genome[:20]}... ({self.prediction})"
"""
    with open(f"{app_name}/models.py", "w") as f:
        f.write(models_content)
    print(f"Updated file: {app_name}/models.py")

    # Update views.py
    views_content = """from django.shortcuts import render
from django.conf import settings
import pandas as pd
import pickle
import os
from .sustain import model
from .models import GenomeSubmission

def handler(request):
    response = None
    if request.method == 'POST':
        try:
            genome = request.POST.get('Name', '').strip()
            if not genome:
                raise ValueError("Genome sequence is required.")
            genome_input = [[char for char in genome]]
            encoder_path = os.path.join(settings.BASE_DIR, 'myapp', 'onehotencoder.pkl')
            with open(encoder_path, 'rb') as f:
                encoder = pickle.load(f)
            data_test = encoder.transform(genome_input).toarray()
            result = model.predict(data_test)
            response = True if result[0] == 1 else False
            GenomeSubmission.objects.create(genome=genome, prediction=response)
        except (ValueError, FileNotFoundError, KeyError, IndexError) as e:
            print(f"Error processing request: {str(e)}")
            response = None
    posts = GenomeSubmission.objects.all().order_by('-submitted_at')[:10]
    return render(request, 'index.html', {'response': response, 'posts': posts})
"""
    with open(f"{app_name}/views.py", "w") as f:
        f.write(views_content)
    print(f"Updated file: {app_name}/views.py")

    # Create app-specific urls.py
    urls_content = f"""from django.urls import path
from .{app_name} import views

urlpatterns = [
    path('', views.handler, name='index'),
]
"""
    with open(f"{app_name}/urls.py", "w") as f:
        f.write(urls_content)
    print(f"Created file: {app_name}/urls.py")

    # Update project urls.py
    project_urls_content = f"""from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('', include('{app_name}.urls')),
] + static(settings.STATIC_URL, document_root=settings.STATICFILES_DIRS[0])
"""
    with open(f"{project_name}/urls.py", "w") as f:
        f.write(project_urls_content)
    print(f"Updated file: {project_name}/urls.py")

    # Update settings.py to include app and static settings
    settings_path = Path(f"{project_name}/settings.py")
    try:
        with settings_path.open("r") as f:
            settings_content = f.readlines()
    except FileNotFoundError:
        print(f"Error: {settings_path} not found.")
        sys.exit(1)

    # Add app to INSTALLED_APPS
    installed_apps_index = next(i for i, line in enumerate(settings_content) if "INSTALLED_APPS" in line)
    settings_content.insert(installed_apps_index + 2, f"    '{app_name}.apps.{app_name.capitalize()}Config',\n")

    # Add static file settings and BASE_DIR
    static_settings = """
# Static files configuration
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'myapp/static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Base directory
import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
"""
    settings_content.append(static_settings)

    try:
        with settings_path.open("w") as f:
            f.writelines(settings_content)
        print(f"Updated file: {project_name}/settings.py")
    except IOError as e:
        print(f"Error writing to {settings_path}: {e}")
        sys.exit(1)

    # Create requirements.txt
    requirements_content = f"""django=={django.__version__}
pandas>=1.2.3
scikit-learn>=0.23.2
"""
    with open("requirements.txt", "w") as f:
        f.write(requirements_content)
    print("Created file: requirements.txt")

    # Create README.md
    readme_content = f"""# {project_name}

A Django project for E. coli prediction using genome sequences.

## Setup Instructions
1. Clone the repository
2. Create and activate a virtual environment:
   - `python -m venv venv`
   - Windows: `venv\\Scripts\\activate`
   - macOS/Linux: `source venv/bin/activate`
3. Install dependencies: `pip install -r requirements.txt`
4. Run migrations: `python manage.py migrate`
5. Start the server: `python manage.py runserver`
6. Access at `http://127.0.0.1:8000/`

## Project Structure
- `{project_name}/`: Project settings and configuration
- `{app_name}/`: Main application with views, models, and templates
- `{app_name}/static/`: CSS, JS, and image assets
- `{app_name}/templates/`: HTML templates
- `{app_name}/onehotencoder.pkl`: OneHotEncoder for genome data
- `{app_name}/EColi-model.pkl`: Machine learning model
- `{app_name}/sustain.py`: Model loader
"""
    with open("README.md", "w") as f:
        f.write(readme_content)
    print("Created file: README.md")

    # Create .gitignore
    gitignore_content = """# Python
__pycache__/
*.py[cod]
*.pyo
*.pyd
.Python
env/
venv/
.venv/
pip-selfcheck.json

# Django
*.log
*.pot
*.pyc
db.sqlite3
media/
staticfiles/

# IDE/Editor
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

# OS generated files
.DS_Store
Thumbs.db

# Environment
.env
.env.local
"""
    with open(".gitignore", "w") as f:
        f.write(gitignore_content)
    print("Created file: .gitignore")

    print("\nProject setup completed successfully!")
    print(f"To start the development server, run:\n  cd {project_name}\n  python manage.py migrate\n  python manage.py runserver")

if __name__ == "__main__":
    create_django_project()